generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  picture       String?
  googleId      String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime  @default(now())
  emailVerified Boolean
  image         String?
  owner         Owner?
  trackers      Tracker[]
  accounts      Account[]
  passkeys      Passkey[]
  sessions      Session[]

  @@map("user")
}

model AnonUser {
  id         String    @id @default(cuid())
  sessionId  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastSeenAt DateTime  @default(now())
  owner      Owner?
  trackers   Tracker[]
}

model Tracker {
  id         String    @id @default(uuid())
  sessionId  String
  ipAddress  String
  userAgent  String
  firstSeen  DateTime  @default(now())
  lastSeen   DateTime  @updatedAt
  userId     String?
  anonUserId String?
  anonUser   AnonUser? @relation(fields: [anonUserId], references: [id])
  user       User?     @relation(fields: [userId], references: [id])

  @@unique([sessionId, ipAddress, userAgent], name: "sessionId_ipAddress_userAgent")
  @@index([userId])
  @@index([anonUserId])
  @@index([ipAddress])
}

model Owner {
  id         String         @id @default(cuid())
  userId     String?        @unique
  anonUserId String?        @unique
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  isAdmin    Boolean        @default(false)
  chats      Chat[]
  models     ModelCatalog[]
  anonUser   AnonUser?      @relation(fields: [anonUserId], references: [id])
  user       User?          @relation(fields: [userId], references: [id])
  settings   OwnerSettings?
}

model Chat {
  id          String        @id @default(cuid())
  title       String
  description String
  createdAt   DateTime      @default(now())
  isDeleted   Boolean       @default(false)
  ownerId     String
  modelId     String?
  model       ModelCatalog? @relation(fields: [modelId], references: [id])
  owner       Owner         @relation(fields: [ownerId], references: [id])
  messages    Message[]

  @@index([ownerId])
}

model Message {
  id        String        @id @default(cuid())
  content   String
  from      String
  chatId    String
  createdAt DateTime      @default(now())
  modelId   String?
  status    MessageStatus @default(COMPLETED)
  chat      Chat          @relation(fields: [chatId], references: [id])
  model     ModelCatalog? @relation(fields: [modelId], references: [id])

  @@index([chatId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passkey")
}

/// Catalog of all LLM models supported by the system
model ModelCatalog {
  id          String          @id @default(cuid())
  provider    String
  name        String
  description String?
  isEnabled   Boolean         @default(true)
  /// NEW ↓ –– who owns it & who can see it
  ownerId     String?
  isPublic    Boolean         @default(false)
  endpoint    String?
  extra       Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  chats       Chat[]
  messages    Message[]
  owner       Owner?          @relation(fields: [ownerId], references: [id])
  ownersDef   OwnerSettings[] @relation("OwnerDefaultModel")

  @@unique([ownerId, name])
  @@index([ownerId])
}

/// Per-owner settings (default model, API keys, etc.)
model OwnerSettings {
  id              String        @id @default(cuid())
  ownerId         String        @unique
  defaultModelId  String?
  openaiApiKey    String?
  anthropicApiKey String?
  extra           Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  model           ModelCatalog? @relation("OwnerDefaultModel", fields: [defaultModelId], references: [id])
  owner           Owner         @relation(fields: [ownerId], references: [id])
}

enum MessageStatus {
  STARTED
  STREAMING
  COMPLETED
  FAILED
  ABORTED
}
